services:
  # Main Qwen Proxy Application
  qwen-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qwen-proxy-app
    restart: unless-stopped
    ports:
      - "8951:8951"
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=8951
      - DASHBOARD_ENABLED=true
      - TRUST_PROXY=true
      - DOCKER_CONTAINER=true
    env_file:
      - .env
    volumes:
      - qwen_data:/app/.qwen
      - qwen_logs:/app/logs
      - qwen_stats:/app/stats
    networks:
      - qwen_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8951/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: qwen-proxy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - qwen_logs:/var/log/nginx
    networks:
      - qwen_network
    depends_on:
      qwen-proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for Session Storage (Optional)
  redis:
    image: redis:7-alpine
    container_name: qwen-proxy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-qwen-redis-password}
    volumes:
      - redis_data:/data
    networks:
      - qwen_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: qwen-proxy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qwen_network
    profiles:
      - monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: qwen-proxy-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - qwen_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  # Application data
  qwen_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_PATH:-./data}
  
  # Application logs
  qwen_logs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOGS_PATH:-./logs}
  
  # Statistics data
  qwen_stats:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${STATS_PATH:-./stats}
  
  # Redis data
  redis_data:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local

networks:
  qwen_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16